import {
  cleanOptions
} from "./chunk-JPBK74SO.js";
import {
  doPrerender
} from "./chunk-3ONEX7UC.js";
import {
  version
} from "./chunk-TWJCZRHJ.js";

// src/cli/build.ts
import multibuild from "@vavite/multibuild";
import pico from "picocolors";
async function build(root, options) {
  const buildOptions = cleanOptions(options);
  let config;
  let total;
  let viteSteps;
  let paths;
  let adapter;
  function logStep(index, name) {
    config.logger.info(
      "\n" + pico.magenta("rakkas") + ": " + name + " (" + pico.green(`${index}/${total}`) + ")"
    );
  }
  await multibuild(
    {
      root,
      base: options.base,
      mode: options.mode,
      configFile: options.config,
      logLevel: options.logLevel,
      clearScreen: options.clearScreen,
      build: buildOptions
    },
    {
      onInitialConfigResolved(resolvedConfig) {
        var _a, _b, _c, _d, _e;
        config = resolvedConfig;
        config.logger.info(
          pico.black(pico.bgMagenta(" RAKKAS ")) + " " + pico.magenta(version) + " \u{1F483}"
        );
        total = viteSteps = ((_a = config.buildSteps) == null ? void 0 : _a.length) || 1;
        paths = ((_c = (_b = config.api) == null ? void 0 : _b.rakkas) == null ? void 0 : _c.prerender) || [];
        if (paths.length) {
          total += 1;
        }
        adapter = (_e = (_d = config.api) == null ? void 0 : _d.rakkas) == null ? void 0 : _e.adapter;
        if (adapter.bundle) {
          total += 1;
        }
      },
      onStartBuildStep(info) {
        logStep(info.currentStepIndex + 1, "Building " + info.currentStep.name);
      }
    }
  );
  let step = viteSteps + 1;
  if (paths.length) {
    logStep(step++, "Prerendering static routes");
    await doPrerender(config, void 0, true);
  }
  if (adapter.bundle) {
    logStep(step++, `Bundling for ${adapter.name}`);
    await adapter.bundle(config.root);
  }
}
export {
  build
};
