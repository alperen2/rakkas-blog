import {
  _extends,
  _toConsumableArray,
  init_extends,
  init_toConsumableArray,
  init_useState,
  useSafeState
} from "./chunk-MYVAKPLP.js";
import {
  _defineProperty,
  _objectSpread2,
  _objectWithoutProperties,
  _slicedToArray,
  _typeof,
  canUseDom,
  init_canUseDom,
  init_defineProperty,
  init_objectSpread2,
  init_objectWithoutProperties,
  init_slicedToArray,
  init_typeof
} from "./chunk-D3EOPLN2.js";
import {
  require_classnames
} from "./chunk-BMWQOTK5.js";
import {
  __esm,
  __export,
  __toESM,
  require_react
} from "./chunk-KNONLE46.js";

// node_modules/rc-util/es/omit.js
function omit(obj, fields) {
  var clone = _objectSpread2({}, obj);
  if (Array.isArray(fields)) {
    fields.forEach(function(key) {
      delete clone[key];
    });
  }
  return clone;
}
var init_omit = __esm({
  "node_modules/rc-util/es/omit.js"() {
    init_objectSpread2();
  }
});

// node_modules/rc-util/es/hooks/useEvent.js
function useEvent(callback) {
  var fnRef = React.useRef();
  fnRef.current = callback;
  var memoFn = React.useCallback(function() {
    var _fnRef$current;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return (_fnRef$current = fnRef.current) === null || _fnRef$current === void 0 ? void 0 : _fnRef$current.call.apply(_fnRef$current, [fnRef].concat(args));
  }, []);
  return memoFn;
}
var React;
var init_useEvent = __esm({
  "node_modules/rc-util/es/hooks/useEvent.js"() {
    React = __toESM(require_react());
  }
});

// node_modules/rc-util/es/hooks/useLayoutEffect.js
var React2, useLayoutEffect2, useLayoutEffect_default, useLayoutUpdateEffect;
var init_useLayoutEffect = __esm({
  "node_modules/rc-util/es/hooks/useLayoutEffect.js"() {
    React2 = __toESM(require_react());
    init_canUseDom();
    useLayoutEffect2 = canUseDom() ? React2.useLayoutEffect : React2.useEffect;
    useLayoutEffect_default = useLayoutEffect2;
    useLayoutUpdateEffect = function useLayoutUpdateEffect2(callback, deps) {
      var firstMountRef = React2.useRef(true);
      useLayoutEffect2(function() {
        if (!firstMountRef.current) {
          return callback();
        }
      }, deps);
      useLayoutEffect2(function() {
        firstMountRef.current = false;
        return function() {
          firstMountRef.current = true;
        };
      }, []);
    };
  }
});

// node_modules/rc-util/es/hooks/useMergedState.js
function hasValue(value) {
  return value !== void 0;
}
function useMergedState(defaultStateValue, option) {
  var _ref = option || {}, defaultValue = _ref.defaultValue, value = _ref.value, onChange = _ref.onChange, postState = _ref.postState;
  var _useState = useSafeState(function() {
    var finalValue = void 0;
    var source;
    if (hasValue(value)) {
      finalValue = value;
      source = Source.PROP;
    } else if (hasValue(defaultValue)) {
      finalValue = typeof defaultValue === "function" ? defaultValue() : defaultValue;
      source = Source.PROP;
    } else {
      finalValue = typeof defaultStateValue === "function" ? defaultStateValue() : defaultStateValue;
      source = Source.INNER;
    }
    return [finalValue, source, finalValue];
  }), _useState2 = _slicedToArray(_useState, 2), mergedValue = _useState2[0], setMergedValue = _useState2[1];
  var chosenValue = hasValue(value) ? value : mergedValue[0];
  var postMergedValue = postState ? postState(chosenValue) : chosenValue;
  useLayoutUpdateEffect(function() {
    setMergedValue(function(_ref2) {
      var _ref3 = _slicedToArray(_ref2, 1), prevValue = _ref3[0];
      return [value, Source.PROP, prevValue];
    });
  }, [value]);
  var changeEventPrevRef = React3.useRef();
  var triggerChange = useEvent(function(updater, ignoreDestroy) {
    setMergedValue(function(prev) {
      var _prev = _slicedToArray(prev, 3), prevValue = _prev[0], prevSource = _prev[1], prevPrevValue = _prev[2];
      var nextValue = typeof updater === "function" ? updater(prevValue) : updater;
      if (nextValue === prevValue) {
        return prev;
      }
      var overridePrevValue = prevSource === Source.INNER && changeEventPrevRef.current !== prevPrevValue ? prevPrevValue : prevValue;
      return [nextValue, Source.INNER, overridePrevValue];
    }, ignoreDestroy);
  });
  var onChangeFn = useEvent(onChange);
  useLayoutEffect_default(function() {
    var _mergedValue = _slicedToArray(mergedValue, 3), current = _mergedValue[0], source = _mergedValue[1], prev = _mergedValue[2];
    if (current !== prev && source === Source.INNER) {
      onChangeFn(current, prev);
      changeEventPrevRef.current = prev;
    }
  }, [mergedValue]);
  return [postMergedValue, triggerChange];
}
var React3, Source;
var init_useMergedState = __esm({
  "node_modules/rc-util/es/hooks/useMergedState.js"() {
    init_slicedToArray();
    React3 = __toESM(require_react());
    init_useEvent();
    init_useLayoutEffect();
    init_useState();
    (function(Source2) {
      Source2[Source2["INNER"] = 0] = "INNER";
      Source2[Source2["PROP"] = 1] = "PROP";
    })(Source || (Source = {}));
  }
});

// node_modules/rc-input/es/utils/commonUtils.js
function hasAddon(props) {
  return !!(props.addonBefore || props.addonAfter);
}
function hasPrefixSuffix(props) {
  return !!(props.prefix || props.suffix || props.allowClear);
}
function resolveOnChange(target, e, onChange, targetValue) {
  if (!onChange) {
    return;
  }
  var event = e;
  if (e.type === "click") {
    var currentTarget = target.cloneNode(true);
    event = Object.create(e, {
      target: {
        value: currentTarget
      },
      currentTarget: {
        value: currentTarget
      }
    });
    currentTarget.value = "";
    onChange(event);
    return;
  }
  if (targetValue !== void 0) {
    event = Object.create(e, {
      target: {
        value: target
      },
      currentTarget: {
        value: target
      }
    });
    target.value = targetValue;
    onChange(event);
    return;
  }
  onChange(event);
}
function triggerFocus(element, option) {
  if (!element)
    return;
  element.focus(option);
  var _ref = option || {}, cursor = _ref.cursor;
  if (cursor) {
    var len = element.value.length;
    switch (cursor) {
      case "start":
        element.setSelectionRange(0, 0);
        break;
      case "end":
        element.setSelectionRange(len, len);
        break;
      default:
        element.setSelectionRange(0, len);
    }
  }
}
function fixControlledValue(value) {
  if (typeof value === "undefined" || value === null) {
    return "";
  }
  return String(value);
}
var init_commonUtils = __esm({
  "node_modules/rc-input/es/utils/commonUtils.js"() {
  }
});

// node_modules/rc-input/es/BaseInput.js
var import_react, import_classnames, BaseInput, BaseInput_default;
var init_BaseInput = __esm({
  "node_modules/rc-input/es/BaseInput.js"() {
    init_defineProperty();
    init_typeof();
    import_react = __toESM(require_react());
    import_classnames = __toESM(require_classnames());
    init_commonUtils();
    BaseInput = function BaseInput2(props) {
      var inputElement = props.inputElement, prefixCls = props.prefixCls, prefix = props.prefix, suffix = props.suffix, addonBefore = props.addonBefore, addonAfter = props.addonAfter, className = props.className, style = props.style, affixWrapperClassName = props.affixWrapperClassName, groupClassName = props.groupClassName, wrapperClassName = props.wrapperClassName, disabled = props.disabled, readOnly = props.readOnly, focused = props.focused, triggerFocus2 = props.triggerFocus, allowClear = props.allowClear, value = props.value, handleReset = props.handleReset, hidden = props.hidden;
      var containerRef = (0, import_react.useRef)(null);
      var onInputClick = function onInputClick2(e) {
        var _containerRef$current;
        if ((_containerRef$current = containerRef.current) !== null && _containerRef$current !== void 0 && _containerRef$current.contains(e.target)) {
          triggerFocus2 === null || triggerFocus2 === void 0 ? void 0 : triggerFocus2();
        }
      };
      var getClearIcon = function getClearIcon2() {
        var _classNames;
        if (!allowClear) {
          return null;
        }
        var needClear = !disabled && !readOnly && value;
        var clearIconCls = "".concat(prefixCls, "-clear-icon");
        var iconNode = _typeof(allowClear) === "object" && allowClear !== null && allowClear !== void 0 && allowClear.clearIcon ? allowClear.clearIcon : "\u2716";
        return import_react.default.createElement("span", {
          onClick: handleReset,
          onMouseDown: function onMouseDown(e) {
            return e.preventDefault();
          },
          className: (0, import_classnames.default)(clearIconCls, (_classNames = {}, _defineProperty(_classNames, "".concat(clearIconCls, "-hidden"), !needClear), _defineProperty(_classNames, "".concat(clearIconCls, "-has-suffix"), !!suffix), _classNames)),
          role: "button",
          tabIndex: -1
        }, iconNode);
      };
      var element = (0, import_react.cloneElement)(inputElement, {
        value,
        hidden
      });
      if (hasPrefixSuffix(props)) {
        var _classNames2;
        var affixWrapperPrefixCls = "".concat(prefixCls, "-affix-wrapper");
        var affixWrapperCls = (0, import_classnames.default)(affixWrapperPrefixCls, (_classNames2 = {}, _defineProperty(_classNames2, "".concat(affixWrapperPrefixCls, "-disabled"), disabled), _defineProperty(_classNames2, "".concat(affixWrapperPrefixCls, "-focused"), focused), _defineProperty(_classNames2, "".concat(affixWrapperPrefixCls, "-readonly"), readOnly), _defineProperty(_classNames2, "".concat(affixWrapperPrefixCls, "-input-with-clear-btn"), suffix && allowClear && value), _classNames2), !hasAddon(props) && className, affixWrapperClassName);
        var suffixNode = (suffix || allowClear) && import_react.default.createElement("span", {
          className: "".concat(prefixCls, "-suffix")
        }, getClearIcon(), suffix);
        element = import_react.default.createElement("span", {
          className: affixWrapperCls,
          style,
          hidden: !hasAddon(props) && hidden,
          onClick: onInputClick,
          ref: containerRef
        }, prefix && import_react.default.createElement("span", {
          className: "".concat(prefixCls, "-prefix")
        }, prefix), (0, import_react.cloneElement)(inputElement, {
          style: null,
          value,
          hidden: null
        }), suffixNode);
      }
      if (hasAddon(props)) {
        var wrapperCls = "".concat(prefixCls, "-group");
        var addonCls = "".concat(wrapperCls, "-addon");
        var mergedWrapperClassName = (0, import_classnames.default)("".concat(prefixCls, "-wrapper"), wrapperCls, wrapperClassName);
        var mergedGroupClassName = (0, import_classnames.default)("".concat(prefixCls, "-group-wrapper"), className, groupClassName);
        return import_react.default.createElement("span", {
          className: mergedGroupClassName,
          style,
          hidden
        }, import_react.default.createElement("span", {
          className: mergedWrapperClassName
        }, addonBefore && import_react.default.createElement("span", {
          className: addonCls
        }, addonBefore), (0, import_react.cloneElement)(element, {
          style: null,
          hidden: null
        }), addonAfter && import_react.default.createElement("span", {
          className: addonCls
        }, addonAfter)));
      }
      return element;
    };
    BaseInput_default = BaseInput;
  }
});

// node_modules/rc-input/es/Input.js
var import_react2, import_classnames2, _excluded, Input, Input_default;
var init_Input = __esm({
  "node_modules/rc-input/es/Input.js"() {
    init_typeof();
    init_toConsumableArray();
    init_extends();
    init_defineProperty();
    init_slicedToArray();
    init_objectWithoutProperties();
    import_react2 = __toESM(require_react());
    init_BaseInput();
    init_omit();
    init_commonUtils();
    import_classnames2 = __toESM(require_classnames());
    init_useMergedState();
    _excluded = ["autoComplete", "onChange", "onFocus", "onBlur", "onPressEnter", "onKeyDown", "prefixCls", "disabled", "htmlSize", "className", "maxLength", "suffix", "showCount", "type", "inputClassName"];
    Input = (0, import_react2.forwardRef)(function(props, ref) {
      var autoComplete = props.autoComplete, onChange = props.onChange, onFocus = props.onFocus, onBlur = props.onBlur, onPressEnter = props.onPressEnter, onKeyDown = props.onKeyDown, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-input" : _props$prefixCls, disabled = props.disabled, htmlSize = props.htmlSize, className = props.className, maxLength = props.maxLength, suffix = props.suffix, showCount = props.showCount, _props$type = props.type, type = _props$type === void 0 ? "text" : _props$type, inputClassName = props.inputClassName, rest = _objectWithoutProperties(props, _excluded);
      var _useMergedState = useMergedState(props.defaultValue, {
        value: props.value
      }), _useMergedState2 = _slicedToArray(_useMergedState, 2), value = _useMergedState2[0], setValue = _useMergedState2[1];
      var _useState = (0, import_react2.useState)(false), _useState2 = _slicedToArray(_useState, 2), focused = _useState2[0], setFocused = _useState2[1];
      var inputRef = (0, import_react2.useRef)(null);
      var focus = function focus2(option) {
        if (inputRef.current) {
          triggerFocus(inputRef.current, option);
        }
      };
      (0, import_react2.useImperativeHandle)(ref, function() {
        return {
          focus,
          blur: function blur() {
            var _inputRef$current;
            (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.blur();
          },
          setSelectionRange: function setSelectionRange(start, end, direction) {
            var _inputRef$current2;
            (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.setSelectionRange(start, end, direction);
          },
          select: function select() {
            var _inputRef$current3;
            (_inputRef$current3 = inputRef.current) === null || _inputRef$current3 === void 0 ? void 0 : _inputRef$current3.select();
          },
          input: inputRef.current
        };
      });
      (0, import_react2.useEffect)(function() {
        setFocused(function(prev) {
          return prev && disabled ? false : prev;
        });
      }, [disabled]);
      var handleChange = function handleChange2(e) {
        if (props.value === void 0) {
          setValue(e.target.value);
        }
        if (inputRef.current) {
          resolveOnChange(inputRef.current, e, onChange);
        }
      };
      var handleKeyDown = function handleKeyDown2(e) {
        if (onPressEnter && e.key === "Enter") {
          onPressEnter(e);
        }
        onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(e);
      };
      var handleFocus = function handleFocus2(e) {
        setFocused(true);
        onFocus === null || onFocus === void 0 ? void 0 : onFocus(e);
      };
      var handleBlur = function handleBlur2(e) {
        setFocused(false);
        onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);
      };
      var handleReset = function handleReset2(e) {
        setValue("");
        focus();
        if (inputRef.current) {
          resolveOnChange(inputRef.current, e, onChange);
        }
      };
      var getInputElement = function getInputElement2() {
        var otherProps = omit(props, [
          "prefixCls",
          "onPressEnter",
          "addonBefore",
          "addonAfter",
          "prefix",
          "suffix",
          "allowClear",
          "defaultValue",
          "showCount",
          "affixWrapperClassName",
          "groupClassName",
          "inputClassName",
          "wrapperClassName",
          "htmlSize"
        ]);
        return import_react2.default.createElement("input", _extends({
          autoComplete
        }, otherProps, {
          onChange: handleChange,
          onFocus: handleFocus,
          onBlur: handleBlur,
          onKeyDown: handleKeyDown,
          className: (0, import_classnames2.default)(prefixCls, _defineProperty({}, "".concat(prefixCls, "-disabled"), disabled), inputClassName, !hasAddon(props) && !hasPrefixSuffix(props) && className),
          ref: inputRef,
          size: htmlSize,
          type
        }));
      };
      var getSuffix = function getSuffix2() {
        var hasMaxLength = Number(maxLength) > 0;
        if (suffix || showCount) {
          var val = fixControlledValue(value);
          var valueLength = _toConsumableArray(val).length;
          var dataCount = _typeof(showCount) === "object" ? showCount.formatter({
            value: val,
            count: valueLength,
            maxLength
          }) : "".concat(valueLength).concat(hasMaxLength ? " / ".concat(maxLength) : "");
          return import_react2.default.createElement(import_react2.default.Fragment, null, !!showCount && import_react2.default.createElement("span", {
            className: (0, import_classnames2.default)("".concat(prefixCls, "-show-count-suffix"), _defineProperty({}, "".concat(prefixCls, "-show-count-has-suffix"), !!suffix))
          }, dataCount), suffix);
        }
        return null;
      };
      return import_react2.default.createElement(BaseInput_default, _extends({}, rest, {
        prefixCls,
        className,
        inputElement: getInputElement(),
        handleReset,
        value: fixControlledValue(value),
        focused,
        triggerFocus: focus,
        suffix: getSuffix(),
        disabled
      }));
    });
    Input_default = Input;
  }
});

// node_modules/rc-input/es/index.js
var es_exports = {};
__export(es_exports, {
  BaseInput: () => BaseInput_default,
  default: () => es_default
});
var es_default;
var init_es = __esm({
  "node_modules/rc-input/es/index.js"() {
    init_BaseInput();
    init_Input();
    es_default = Input_default;
  }
});

export {
  omit,
  init_omit,
  useEvent,
  init_useEvent,
  useLayoutEffect_default,
  useLayoutUpdateEffect,
  init_useLayoutEffect,
  useMergedState,
  init_useMergedState,
  es_default,
  es_exports,
  init_es
};
//# sourceMappingURL=chunk-HIKAZ6DA.js.map
